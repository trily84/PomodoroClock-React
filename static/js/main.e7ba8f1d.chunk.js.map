{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","breakLength","sessionLength","timerState","appendZero","number","handleBreakIncrement","bind","handleBreakDecrement","handleSessionIncrement","handleSessionDecrement","startStop","reset","sessionRunning","breakRunning","this","setState","prevState","console","log","document","getElementById","innerHTML","timeRemain","parseInt","secs","getminutes","Math","floor","decrement","round","Audio","play","setInterval","clearInterval","className","id","onClick","src","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e7ba8f1d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    breakLength: 5,\n    sessionLength: 25,\n    timerState: \"paused\",\n  }\n\n  constructor(props) {\n    super(props)\n    this.handleBreakIncrement = this.handleBreakIncrement.bind(this)\n    this.handleBreakDecrement = this.handleBreakDecrement.bind(this)\n    this.handleSessionIncrement = this.handleSessionIncrement.bind(this)\n    this.handleSessionDecrement = this.handleSessionDecrement.bind(this)\n    this.startStop = this.startStop.bind(this)\n    this.reset = this.reset.bind(this)\n    this.appendZero = this.appendZero.bind(this)\n    this.sessionRunning = true\n    this.breakRunning = false\n  }\n\n  appendZero = (number) => {\n    if (number <= 9)\n      return \"0\" + number;\n    else\n      return number; \n  }\n\n  handleBreakIncrement() {\n    if (this.state.breakLength <= 59) {\n    this.setState(prevState => ({\n      breakLength: prevState.breakLength + 1\n    }), function () {console.log(this.state)}\n    )\n    }\n  }\n\n  handleBreakDecrement() {\n    if (this.state.breakLength > 1) {\n    this.setState(prevState => ({\n      breakLength: prevState.breakLength - 1\n    })) \n    }\n  }\n\n  handleSessionIncrement() {\n    if (this.state.sessionLength <= 59) {\n    this.setState(prevState => ({\n      sessionLength: prevState.sessionLength + 1\n    })) \n    }\n  }\n\n  handleSessionDecrement() {\n    if (this.state.sessionLength > 1) {\n    this.setState(prevState => ({\n      sessionLength: prevState.sessionLength - 1\n    })) \n    }\n  }\n\n  startStop() {\n    \n    if (document.getElementById(\"start_stop\").innerHTML === \"Start\") {\n      document.getElementById(\"start_stop\").innerHTML = \"Stop\"\n    }  \n\n    else if (document.getElementById(\"start_stop\").innerHTML === \"Stop\") {\n      document.getElementById(\"start_stop\").innerHTML = \"Start\"\n    }  \n\n    var timeRemain = (parseInt(document.getElementById(\"minutes\").innerHTML) * 60) + parseInt(document.getElementById(\"seconds\").innerHTML) - 1\n    console.log(\"timeRemain:\", timeRemain)\n    var secs = timeRemain\n    console.log(\"secs:\", secs)\n\n    function getminutes() { \n      //minutes is seconds divided by 60, rounded down \n      return Math.floor(secs / 60)\n    }\n\n    function getseconds() { \n      //take minutes remaining (as seconds) away from total seconds remaining \n      return secs - Math.round(getminutes() * 60)\n    } \n\n    function appendZero(number) {\n      if (number <= 9)\n        return \"0\" + number\n      else\n        return number\n    }\n\n    const decrement = () => {\n        document.getElementById(\"minutes\").innerHTML = appendZero(getminutes())\n        document.getElementById(\"seconds\").innerHTML = appendZero(getseconds())\n        if (secs > 0) {\n        secs = secs - 1\n        }\n        console.log(secs)\n       \n        if (document.getElementById(\"minutes\").innerHTML === \"00\" && document.getElementById(\"seconds\").innerHTML === \"00\") {\n          var alarm = new Audio(\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\");\n          alarm.play();\n          // document.getElementById(\"beep\").play();\n\n          if (this.breakRunning === false) {\n              document.getElementById(\"timer-label\").innerHTML = \"Break Countdown..\"\n              document.getElementById(\"minutes\").innerHTML = this.state.breakLength\n              document.getElementById(\"seconds\").innerHTML = \"0\"\n              secs = (parseInt(document.getElementById(\"minutes\").innerHTML) * 60) + parseInt(document.getElementById(\"seconds\").innerHTML)\n              this.breakRunning = true\n              this.sessionRunning = false\n          }    \n          else {\n              document.getElementById(\"timer-label\").innerHTML = \"Session Countdown..\"\n              document.getElementById(\"minutes\").innerHTML = this.state.sessionLength\n              document.getElementById(\"seconds\").innerHTML = \"0\"\n              secs = (parseInt(document.getElementById(\"minutes\").innerHTML) * 60) + parseInt(document.getElementById(\"seconds\").innerHTML)\n              this.breakRunning = false\n              this.sessionRunning = true\n          }\n        }\n    }    \n\n    if (this.state.timerState === \"paused\") {\n      this.setState({\n        timerState: setInterval(() => decrement(), 100),\n      }, function () {console.log(\"timerState:\", this.state.timerState)})\n    }\n    \n    else if (this.state.timerState !== \"paused\") {\n      clearInterval(this.state.timerState)\n      this.setState({\n        timerState: \"paused\"\n      }, function () {console.log(\"timerState:\", this.state.timerState)})\n    }\n\n  }\n\n  reset() {\n    clearInterval(this.state.timerState)\n    document.getElementById(\"minutes\").innerHTML = this.state.sessionLength\n    document.getElementById(\"seconds\").innerHTML = \"00\"\n    this.setState(prevState => ({\n      timerState: \"paused\",\n      breakLength: 5,\n      sessionLength: 25,\n    }))\n    document.getElementById(\"start_stop\").innerHTML = \"Start\"\n  }\n\n  render() {\n    return (\n      <div className=\"out\">\n\n      <div id=\"title\">POMODORO CLOCK</div>\n\n      <div className=\"container\">\n        <div id=\"session-label\">Set Session</div>\n        <div id=\"break-label\">Set Break</div>\n        <button id=\"break-increment\" onClick={this.handleBreakIncrement}>+</button>\n        <button id=\"break-decrement\" onClick={this.handleBreakDecrement}>-</button>\n        <button id=\"session-increment\" onClick={this.handleSessionIncrement}>+</button>\n        <button id=\"session-decrement\" onClick={this.handleSessionDecrement}>-</button>\n        <div id=\"break-length\">{this.appendZero(this.state.breakLength)+\" minutes\"}</div>\n        <div id=\"session-length\">{this.appendZero(this.state.sessionLength)+\" minutes\"}</div>\n        <div src=\"tomato.png\" id=\"tomato\"></div>\n        <div id=\"timer-label\">Session Countdown..</div>\n        <div id=\"time-left\"><span id=\"minutes\">{this.appendZero(this.state.sessionLength)}</span>:<span id=\"seconds\">00</span></div>\n        <button id=\"start_stop\" onClick={this.startStop}>Start</button>\n        <button id=\"reset\" onClick={this.reset}>Reset</button>\n        {/* <audio id=\"beep\" src=\"./src/Rooster.mp3\"></audio> */}\n      </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}